
[
	local,
	object,
	uuid(8335e432-ab3b-11ce-8468-0000b468276b
)
]
interface IPlayStringList : IUnknown
{
	import "unknwn.idl";
	import "wtypes.idl";

    // add a string to the list at position nPos (the previous 
    // string at that position will be moved down)  Invalid nPos values
    // will cause string to be added to end of list. (0 is first)
    // note, there can be no gaps in the list.  Index starts with 0 and
    // goes up to n-1, where n is the number of strings in it.
    // Strings will be copied into memory owned by the COM object.
    HRESULT AddString( [string] LPSTR pszSelection, int nPos );

    // get a copy of the string with the given index. It copies nMaxChars
	// of the string into CopyDest. If nMaxChars is less than the string's
	// length it returns S_FALSE as an indicator, otherwise S_OK. If nPos 
    // is an index that is invalid, it returns E_INVALIDARG.
    HRESULT CopyString( int nPos, [string] LPSTR pszCopyDest, int nMaxChars );

    // delete the string number nPos from the list.  (0 is first list position)
    // may return E_INVALIDARG if nPos refers to a non-existant string.
    HRESULT DelString( int nPos );

	// Makes the listbox mutually exclusive. The argument supplied is the
	// default index in the listbox that will be checked. When the listbox
	// is mutex, only one item at a time will ever be turned on.
	HRESULT SetMutuallyExclusive(int nDefault);

	// Gets the number of listbox entries that are in the specified mask.
	// Mask can be:
	//					PCSTR_ALL		: All the strings in the listbox
	//					PCSTR_ON		: All the strings with checkmark (on).
	//					PCSTR_OFF		: All strings without checkmark (off).
	HRESULT GetNumber(DWORD dwMask, int *pResult);

	// Returns an array of integers specifying the indexes into the listbox
	// that match the given mask. pNumberArray is an array to hold the results.
	// pReturned is supplied with the number of spaces in the array, and 
	// pReturned will hold the number of indexes used upon return.
	// It is up to the caller to allocate enough memory in
	// the array passed in. If not all the elts can fit in the space provided
	// S_FALSE will be returned and the array will hold up to the amt requested
	// in pReturned.
	// Mask can be:
	//					PCSTR_ALL		: All the strings in the listbox
	//					PCSTR_ON		: All the strings with checkmark (on).
	//					PCSTR_OFF		: All strings without checkmark (off).
	HRESULT GetStringIndex(DWORD dwMask, int *pNumberArray, int *pReturned);
}
