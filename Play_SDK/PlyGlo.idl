/*==========================================================================*\
||                                                                          ||
||  Copyright 1995 by Play Incorporated                                     ||
||  PLAY CONFIDENTIAL                                                       ||
||                                                                          ||
||  All Specifications subject to change.                                   ||
||                                                                          ||
||  FILE:       PlyGlo.idl                                                  ||
||                                                                          ||
||  DESCRIPTION:Interface description for creating and using glow masks     ||
||                                                                          ||
||  INTERFACES : IPlayGlow                                                  ||
||                                                                          ||
||  Written by Todd Sprague                                                 ||
||  (c) 1995 by Play Incorporated                                           ||
||  PLAY CONFIDENTIAL                                                       ||
||                                                                          ||
||  MODIFICATIONS:  1/24/96     Created                         T.Sprague   ||
||                                                                          ||
\*==========================================================================*/


//
// The Glow interface itself.
//

[
    local,
    object,
    uuid(8335e427-ab3b-11ce-8468-0000b468276b)
]
interface IPlayGlow : IUnknown
{
    import "unknwn.idl";
    import "wtypes.idl";
    import "gxlate.idl";

    // This will set the size of the glow to be drawn.  The actual glow will be
    // bright at the edge of an inner ellipse with height from the lInner,
    // and will fall off to zero at or before the edge of an outer ellipse from
    // psizeOuter.  Calling this routine will invalidate any glow
    // masks that have been previously generated by this object.
    // The inner and outer ellipses are concentric, centered within the outer 
    // rectangle, and both have the same eccentricity.
    HRESULT SetSize( [in] SIZE *psizeOuter, [in] ULONG lInner );

    // find out the sizes of the glow ellipses.  See above.
    // This can be called without the mask having been generated, and it will
    // not cause the mask to generated.  If it doesn't know the sizes yet,
    // it will return E_FAIL, and both parts of the SIZE structs will be zero.
    HRESULT GetSize( [out] SIZE *psizeOuter, [out] ULONG *plInner );

    // this allows a programmer to mask out parts of the glow.  
    // eg, maybe he wants the glow to surround a rectangle, then he would
    // do a SetRect on the rectangle to transparency 0.  dx,dy are 
    // relative to upper-left, and the inner ellipse is centered within the
    // outer one.
    // Calling this function will force the mask to be generated if it hasn't
    // been yet.  This actually alters the mask, so these changes will
    // remain until the mask is generated again.
    HRESULT SetRect( int dx, int dy, int w, int h, DWORD dwTrans );

    // This routine allows one to force the glow mask to be generated.  After this,
    // any of the following routines can be called without the mask having to be
    // re-generated.
    HRESULT ForceGenerate();

    // This sets the color that the text will be drawn in.
    HRESULT SetColor( DWORD dwColor );

    // This allows for setting a global transparency level of the glow.
    // This level is used during the drawing process.
    // 0 is totally transparent, 255 or higher is totally opaque.
    HRESULT SetTransparency( DWORD dwTrans );

    // This draws the current glow into the given DC at the given position.
    // If the mask hasn't been generated yet, or if it has become invalid, then
    // this routine will cause the mask to be generated before it is drawn.
    HRESULT DrawToDC( HDC hDC, ULONG dx, ULONG dy );

    // This draws the current glow into the given bitmap at the given position.
    // If the mask hasn't been generated yet, or if it has become invalid, then
    // this routine will cause the mask to be generated before it is drawn.
    HRESULT DrawToBitmap( IGXIntBitmap *piBitmap, ULONG dx, ULONG dy );

    // This draws the current glow into the given DIB at the given position.
    // The DIB must be 24-bit.
    // If the mask hasn't been generated yet, or if it has become invalid, then
    // this routine will cause the mask to be generated before it is drawn.
    // (the LPVOID is really a (BITMAPINFOHEADER*) )
    HRESULT DrawToDIB( LPVOID pBMIH, unsigned char *pBits, ULONG dx, ULONG dy );

    // Release the memory used by the glow mask.  Subsequent drawing calls
    // will have to generate the mask again.
    HRESULT ReleaseMask();

}

