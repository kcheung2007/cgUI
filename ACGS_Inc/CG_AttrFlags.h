//CG_AttrFlags.h
#ifndef _CG_ATTRFLAGS_H
#define _CG_ATTRFLAGS_H

// COPY PASTE ATTR FNS --------------------------------
//TODO add paste attr enable, feather foos
//TODO Support extend?
//TODO add new fields in esf doc  
enum PASTE_ATTRIB_FLAGS
{
PASTE_TYPEFACE_ATTRB=1,
PASTE_V_SIZE_ATTRB,
PASTE_H_SIZE_ATTRB,

PASTE_FACE_COLOR_ATTRB,
PASTE_FACE_ALPHA_ATTRB,
PASTE_FACE_BLUR_ATTRB,
PASTE_FACE_EFFECT_ATTRB,

PASTE_OUTLINE1_ENABLE_ATTRB,
PASTE_OUTLINE1_SIZE_ATTRB,
PASTE_OUTLINE1_COLOR_ATTRB,
PASTE_OUTLINE1_ALPHA_ATTRB,
PASTE_OUTLINE1_BLUR_ATTRB,
PASTE_OUTLINE1_OFFSET_ATTRB,

PASTE_OUTLINE2_ENABLE_ATTRB,
PASTE_OUTLINE2_SIZE_ATTRB,
PASTE_OUTLINE2_COLOR_ATTRB,
PASTE_OUTLINE2_ALPHA_ATTRB,
PASTE_OUTLINE2_BLUR_ATTRB,
PASTE_OUTLINE2_OFFSET_ATTRB,

PASTE_SHADOW1_ENABLE_ATTRB,
PASTE_SHADOW1_SIZE_DIR_ATTRB,
PASTE_SHADOW1_COLOR_ATTRB,
PASTE_SHADOW1_ALPHA_ATTRB,
PASTE_SHADOW1_BLUR_ATTRB,
PASTE_SHADOW1_OFFSET_ATTRB,

PASTE_SHADOW2_ENABLE_ATTRB,
PASTE_SHADOW2_SIZE_DIR_ATTRB,
PASTE_SHADOW2_COLOR_ATTRB,
PASTE_SHADOW2_ALPHA_ATTRB,
PASTE_SHADOW2_BLUR_ATTRB,
PASTE_SHADOW2_OFFSET_ATTRB,

PASTE_SURROUND_ENABLE_ATTRB,
PASTE_SURROUND_SIZE_DIR_ATTRB,
PASTE_SURROUND_COLOR_ATTRB,
PASTE_SURROUND_ALPHA_ATTRB,
PASTE_SURROUND_BLUR_ATTRB,
PASTE_SURROUND_OFFSET_ATTRB,

PASTE_UNDERLINE_ATTRB,
PASTE_ITALICS_ATTRB,
PASTE_BEVEL_ATTRB,
PASTE_SMALL_CAPS_ATTRB,
PASTE_ROTATION_ATTRB,
PASTE_PRIORITY_ATTRB,
PASTE_GLOBAL_ALPHA_ATTRB,
PASTE_OBJECT_TYPE_ATTRB,
PASTE_BOLDNESS_ATTRB,
PASTE_FLASH_ATTRB,
PASTE_SMALL_CAPS_PERC_ATTRB,
PASTE_FONT_CHARSET_ATTRB,

PASTE_POSITION_ATTRB,
END_SINGLE_ITEM_LIST, //<-LIST POSITION MARKER

MULTIPASTE_ALL_APPEARANCE_ATTRB,
MULTIPASTE_SIZE_ATTRB,
MULTIPASTE_ALL_ATTRB,//paste multiple above
//----------------
PASTE_ATTRB_MAXVAL//<-LIST POSITION MARKER
};

class CGObjAttrMasks
{
	public:

	//constructor
	CGObjAttrMasks()
	{
		ClearAll();
	}
	//constructor
	~CGObjAttrMasks()
	{
	}

	BOOL IsSet(int Attr)
	{
		if(AttributeList[Attr])
			return(TRUE);
		return(FALSE);
	}

	void Set(int Attr)
	{
		if(Attr==MULTIPASTE_ALL_ATTRB)
		{
			WriteRange(0,END_SINGLE_ITEM_LIST-1,1);
			return;
		}
		if(Attr==MULTIPASTE_ALL_APPEARANCE_ATTRB)
		{
//old #define PASTE_ALL_APPEARANCE_ATTRB	(PASTE_ALL_ATTRB&(~(PASTE_POSITION_ATTRB|PASTE_OBJECT_TYPE_ATTRB)))
			WriteRange(0,END_SINGLE_ITEM_LIST-1,1);
			Clear(PASTE_POSITION_ATTRB);
			Clear(PASTE_OBJECT_TYPE_ATTRB);
			
			return;
		}

		if(Attr==MULTIPASTE_SIZE_ATTRB)
		{
			Set(PASTE_H_SIZE_ATTRB);
			Set(PASTE_V_SIZE_ATTRB);
			return;
		}
		AttributeList[Attr]=1;
	}
	
	void AddVals(CGObjAttrMasks* SrcMasks)
	{
		int i;
		for(i=0;i<PASTE_ATTRB_MAXVAL;i++)
			if(SrcMasks->IsSet(i))
				Set(i);
	}

	void Clear(int Attr)
	{
		if(Attr==MULTIPASTE_ALL_ATTRB)
		{
			WriteRange(0,END_SINGLE_ITEM_LIST-1,0);
			return;
		}
		if(Attr==MULTIPASTE_ALL_APPEARANCE_ATTRB)
		{
			return;
		}
		if(Attr==MULTIPASTE_SIZE_ATTRB)
		{
			Clear(PASTE_H_SIZE_ATTRB);
			Clear(PASTE_V_SIZE_ATTRB);
			return;
		}
		AttributeList[Attr]=0;
	}

	void WriteRange(int StartAttr,int EndAttrInclusive,int Val)
	{
		int i;
		for(i=StartAttr;i<=EndAttrInclusive;i++)
			AttributeList[i]=Val;
	}

	void ClearAll(void)
	{
		memset(&AttributeList[0],0,sizeof(AttributeList));
	}

	private:
		int AttributeList[PASTE_ATTRB_MAXVAL];

};

//all attributes which determine appearance of char (i.e. not x,y position)
//#define PASTE_ALL_APPEARANCE_ATTRB	(PASTE_ALL_ATTRB&(~(PASTE_POSITION_ATTRB|PASTE_OBJECT_TYPE_ATTRB)))
//#define PASTE_SIZE_ATTRB				(PASTE_H_SIZE_ATTRB|PASTE_V_SIZE_ATTRB)
//#define PASTE_PROPORTIONAL_SIZE_ATTRB	(PASTE_H_SIZE_ATTRB|PASTE_V_SIZE_ATTRB)
/*
#define PASTE_ALL_FACE_APPEARANCE_ATTRB (PASTE_FACE_COLOR_ATTRB|PASTE_FACE_EFFECT_ATTRB|PASTE_FACE_ALPHA_ATTRB|PASTE_FACE_BLUR_ATTRB)

#define PASTE_ALL_OUTLINE_APPEARANCE_ATTRB (PASTE_OUTLINE_COLOR_ATTRB|PASTE_OUTLINE_SIZE_ATTRB|PASTE_OUTLINE_ALPHA_ATTRB)

#define PASTE_ALL_SHADOW_APPEARANCE_ATTRB (PASTE_SHADOW_COLOR_ATTRB|PASTE_SHADOW_SIZE_DIR_ATTRB|PASTE_SHADOW_ALPHA_ATTRB)

#define PASTE_ALL_CAST_APPEARANCE_ATTRB (PASTE_CAST_COLOR_ATTRB|PASTE_CAST_SIZE_DIR_ATTRB|PASTE_CAST_ALPHA_ATTRB|PASTE_CAST_SOFTNESS_ATTRB)

#define PASTE_ALL_TRANSPARENCY_ATTRB (PASTE_FACE_ALPHA_ATTRB|PASTE_OUTLINE_ALPHA_ATTRB|PASTE_SHADOW_ALPHA_ATTRB|PASTE_CAST_ALPHA_ATTRB|PASTE_CAST_SOFTNESS_ATTRB|PASTE_GLOBAL_ALPHA_ATTRB)
*/
#endif// _CG_ATTRFLAGS_H
